searchState.loadedDescShard("pipeline", 0, "fields not in the columns will be discarded to prevent …\nNo value.\nPipeline info. A tuple of timestamp and pipeline reference.\nPipeline version. An optional timestamp with nanosecond …\nProcessor trait defines the interface for all processors A …\nSome value of type <code>T</code>.\nValue can be used as type acts as value: the enclosed …\nExecute the processor on a document and return a map of …\nExecute the processor on a vector which be preprocessed by …\nGet the processor’s fields fields is just the same …\nGet the processor’s fields mutably\nWhether to ignore missing\nintermediate keys from the processors\nGet the processor’s kind\nprocessor all output keys if a processor has multiple …\nall output keys from the transformer\nrequired keys for the preprocessing from map data from user\nSNAFU context selector for the <code>Error::BuildDfLogicalPlan</code> …\nSNAFU context selector for the <code>Error::CastType</code> variant\nSNAFU context selector for the <code>Error::Catalog</code> variant\nSNAFU context selector for the <code>Error::CollectRecords</code> …\nSNAFU context selector for the <code>Error::CompilePipeline</code> …\nSNAFU context selector for the <code>Error::CreateTable</code> variant\nSNAFU context selector for the <code>Error::DataFrame</code> variant\nContains the error value\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InsertPipeline</code> …\nSNAFU context selector for the …\nContains the success value\nSNAFU context selector for the <code>Error::PipelineNotFound</code> …\nSNAFU context selector for the <code>Error::PipelineTableNotFound</code>…\nSNAFU context selector for the <code>Error::PipelineTransform</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nintermediate keys from the processors\nintermediate keys from the processors\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll output keys from the pipeline\nall output keys from the transformer\nRequired fields in user-supplied data\nrequired keys for the preprocessing from map data from user\nset the index for the processor keys the index is the …\nUsed to represent the input and output fields of a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ninput column_name in processor or transform\ntarget column_name in processor or transform if …\nThe input field name and index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe output field name and index mapping.\nset input column index in processor or transform\nProcessor trait defines the interface for all processors A …\nExecute the processor on a document and return a map of …\nExecute the processor on a document and return a map of …\nExecute the processor on a map and merge the output into …\nExecute the processor on a map and merge the output into …\nExecute the processor on a map and merge the output into …\nExecute the processor on a vector which be preprocessed by …\nExecute the processor on a vector which be preprocessed by …\nGet the processor’s fields fields is just the same …\nGet the processor’s fields fields is just the same …\nGet the processor’s fields mutably\nGet the processor’s fields mutably\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to ignore missing\nWhether to ignore missing\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the processor’s kind\nGet the processor’s kind\nprocessor all output keys if a processor has multiple …\nprocessor all output keys if a processor has multiple …\nA collection of all the processor’s output fields\nall output keys in all processors\nA ordered list of processors The order of processors is …\nA collection of all the processor’s required input fields\nall required keys in all processors\nRequired fields in user-supplied data, not pipeline output …\nall required keys in user-supplied data, not pipeline …\nCommon Media Client Data Specification: …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nonly support string value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ndeprecated it should be removed in the future Reserved for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntry to parse val with timezone first, if failed, parse …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdate the output keys for each field.\nsupport string, integer, float, time, epoch deprecated it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA processor to replace all matches of a pattern in string …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA processor to join each element of an array into a single …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nonly support string value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nonly support string value if no value found from a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nsupport string, integer, float, time, epoch\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ntry to parse val with timezone first, if failed, parse …\nonly support string value\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOn Failure behavior when transform fails\nonly field is required\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nfields not in the columns will be discarded to prevent …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValue can be used as type acts as value: the enclosed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nonly support string, bool, number, null\nonly support string, bool, number, null\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNo value.\nPipeline info. A tuple of timestamp and pipeline reference.\nPipeline version. An optional timestamp with nanosecond …\nSome value of type <code>T</code>.\nSNAFU context selector for the <code>Error::BuildDfLogicalPlan</code> …\nSNAFU context selector for the <code>Error::CastType</code> variant\nSNAFU context selector for the <code>Error::Catalog</code> variant\nSNAFU context selector for the <code>Error::CollectRecords</code> …\nSNAFU context selector for the <code>Error::CompilePipeline</code> …\nSNAFU context selector for the <code>Error::CreateTable</code> variant\nSNAFU context selector for the <code>Error::DataFrame</code> variant\nContains the error value\nSNAFU context selector for the …\nSNAFU context selector for the <code>Error::InsertPipeline</code> …\nSNAFU context selector for the …\nContains the success value\nSNAFU context selector for the <code>Error::PipelineNotFound</code> …\nSNAFU context selector for the <code>Error::PipelineTableNotFound</code>…\nSNAFU context selector for the <code>Error::PipelineTransform</code> …\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return the associated error\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nConsume the selector and return a <code>Result</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPipelineOperator is responsible for managing pipelines. It …\nCreate a table request for the pipeline table.\nDelete a pipeline by name from pipeline table.\nReturns the argument unchanged.\nGet a pipeline from the pipeline table.\nGet a pipeline table from the cache.\nInsert a pipeline into the pipeline table.\nCalls <code>U::from(self)</code>.\nCreate a new PipelineOperator.\nPipeline table cache size.\nPipeline table cache time to live.\nPipelineTable is a table that stores the pipeline schema …\nBuild the column schemas for inserting a row into the …\nBuild the schema for the pipeline table. Returns the (time …\nCompile a pipeline from a string.\nReturns the argument unchanged.\nGet a pipeline by name. If the pipeline is not in the …\nInsert a pipeline into the pipeline table and compile it. …\nInsert a pipeline into the pipeline table.\nCalls <code>U::from(self)</code>.\nCreate a new PipelineTable.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPipelineOperator is responsible for managing pipelines. It …\nPipelineTable is a table that stores the pipeline schema …")